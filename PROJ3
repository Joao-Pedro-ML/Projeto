#include "esp_wpa2.h"
//#include "esp_wifi.h"
#include <WiFi.h>
#include <OneWire.h>
#include <DallasTemperature.h>

#define ONE_WIRE_BUS 4 //pino que recebe os dados do sensor

const char* ssid = "UTFPRWEB"; // your ssid
#define EAP_ID "a2150980"
#define EAP_USERNAME "a2150980"
#define EAP_PASSWORD "joaope14"
#define NOME_HOST "ESP32-Manoel"

void WiFiEvent(WiFiEvent_t event){ //codigo adaptado apenas para Station
                                   //de https://github.com/espressif/arduino-esp32/blob/master/libraries/WiFi/examples/WiFiIPv6/WiFiIPv6.ino
   unsigned long startTime=0;
    switch(event) {
        case SYSTEM_EVENT_STA_START:
            //set sta hostname here
            Serial.println("Evento STA_START");
            WiFi.setHostname(NOME_HOST);
            break;
        case SYSTEM_EVENT_STA_CONNECTED:
            //enable sta ipv6 here
            Serial.println("Evento STA_CONNECTED");
            WiFi.enableIpV6();
            break;
        case SYSTEM_EVENT_AP_STA_GOT_IP6:
            //both interfaces get the same event
            Serial.print("EVENTO STA IPv6: ");
            Serial.println(WiFi.localIPv6());
            //Serial.print("EVENTO AP IPv6: ");
            //Serial.println(WiFi.softAPIPv6());                       
            break;
        case SYSTEM_EVENT_STA_GOT_IP:
            //wifiOnConnect();
            //wifi_connected = true;
            Serial.println("Evento de STA_GOT_IP...");
            break;
        case SYSTEM_EVENT_STA_DISCONNECTED:
            //wifi_connected = false;            ;
            Serial.println("Evento de STA_DISCONNECTED...");
            WiFi.begin(ssid);
            Serial.println("Conectando WiFi Wpa2 Enterprise de novo...");
             startTime = millis();
             while (WiFi.status() != WL_CONNECTED && millis() - startTime < 10000)
            {
              Serial.write('.');
              delay(500);
            }
            if (WiFi.status() != WL_CONNECTED)
               ESP.restart();
            break;
        default:
            break;
    }
}


OneWire oneWire(ONE_WIRE_BUS);

DallasTemperature sensors(&oneWire);

const char* resource = "/trigger/Calorimetria/with/key/odHKuB1CwrELT5UI-_HRC5sKon0MbuuCgX3HNh49k5y";

const char* server = "maker.ifttt.com";

//tempo de sleep
uint64_t uS_TO_S_FACTOR = 1000000; //fator de conversão de milisegundos para segundos
//sleep durante 30 minutos
uint_t TIME_TO_SLEEP = 1800;

//#define SEALEVELPRESSURE_HPA (1013.25)

void setup() {
  // put your setup code here, to run once:

  //conexao WIFI
  Serial.begin(115200);  
  Serial.println();
  Serial.println();
  Serial.print("Conectando ao SSID: ");
  Serial.println(ssid);
 
  //Adaptado de https://github.com/espressif/arduino-esp32/blob/master/libraries/WiFi/examples/WiFiScan/WiFiScan.ino
  WiFi.mode(WIFI_STA); //Mode Station (cliente...)
  WiFi.disconnect(true);  
  WiFi.onEvent(WiFiEvent); //codigo de https://github.com/espressif/arduino-esp32/blob/master/libraries/WiFi/examples/WiFiIPv6/WiFiIPv6.ino
  //Parte WPA2 enterprise   (consultado aqui: https://github.com/espressif/esp-idf/blob/master/examples/wifi/wpa2_enterprise/main/wpa2_enterprise_main.c
                          //FONTES:
                          //https://github.com/JeroenBeemster/ESP32-WPA2-enterprise/blob/master/ESP32_WPA2enterprise.ino
                          //http://codegist.net/snipt/arduino/esp32_wpa2ino_me-no-dev_arduino
 
  esp_wifi_sta_wpa2_ent_clear_ca_cert();
  esp_wifi_sta_wpa2_ent_clear_cert_key();
  esp_wifi_sta_wpa2_ent_clear_identity();
  esp_wpa2_config_t configuracao = WPA2_CONFIG_INIT_DEFAULT();
 
  esp_wifi_sta_wpa2_ent_set_identity((uint8_t *)EAP_ID, strlen(EAP_ID));
  esp_wifi_sta_wpa2_ent_set_username((uint8_t *)EAP_USERNAME, strlen(EAP_USERNAME));
  esp_wifi_sta_wpa2_ent_set_password((uint8_t *)EAP_PASSWORD, strlen(EAP_PASSWORD));
  esp_wifi_sta_wpa2_ent_enable(&configuracao);  
  WiFi.begin(ssid);
  //final WPA2 enterprise
 
  //partes de codigo tambem adaptadas de https://github.com/espressif/arduino-esp32/blob/master/libraries/WiFi/examples/WiFiClient/WiFiClient.ino

  Serial.println();
  Serial.println("Conectando WiFi Wpa2 Enterprise");
  unsigned long startTime = millis();
 
    while (WiFi.status() != WL_CONNECTED && millis() - startTime < 10000)
    {
      Serial.write('.');
      delay(500);
    }

    if (WiFi.status() != WL_CONNECTED)
       ESP.restart();

  Serial.println("");
  Serial.println("WiFi conectado");
  Serial.println("Endereço IP: ");
  Serial.println(WiFi.localIP());
  

  Serial.begin(115200); //inicia a serial
  //inicia o objeto da biblioteca do Dallas
  sensors.begin();
  
  makeIFTTTRequest();
  
   #ifdef ESP32
    // enable timer deep sleep
    esp_sleep_enable_timer_wakeup(TIME_TO_SLEEP * uS_TO_S_FACTOR);    
    Serial.println("Going to sleep now");
    // start deep sleep for 3600 seconds (60 minutes)
    esp_deep_sleep_start();
  #else
    // Deep sleep mode for 3600 seconds (60 minutes)
    Serial.println("Going to sleep now");
    ESP.deepSleep(TIME_TO_SLEEP * uS_TO_S_FACTOR); 
  #endif
}

void loop() {
  // put your main code here, to run repeatedly:
  Serial.println("Coletando temperaturas...");
  delay(500); 
  sensors.requestTemperaturesByIndex(0);  //Envia o comando para obter temperaturas
  Serial.println("PRONTO!!!");
  delay(500);
  float leitura=sensors.getTempCByIndex(0); //define a temperatura em graus celsius
    Serial.println(leitura); //mostra a temperarura na tela
    delay(1000);
    
  // Make an HTTP request to the IFTTT web service
void makeIFTTTRequest() {
  Serial.print("Connecting to "); 
  Serial.print(server);
  
  WiFiClient client;
  int retries = 5;
  while(!!!client.connect(server, 80) && (retries-- > 0)) {
    Serial.print(".");
  }
  Serial.println();
  if(!!!client.connected()) {
    Serial.println("Failed to connect...");
  }
  
  Serial.print("Request resource: "); 
  Serial.println(resource);
  
  String jsonObject = String("{\"value1\":\"") + bme.readTemperature() + "\",\"value2\":\"" + (bme.readTime()/100.0F)+"\""}";
  
  client.println(String("POST ") + resource + " HTTP/1.1");
  client.println(String("Host: ") + server); 
  client.println("Connection: close\r\nContent-Type: application/json");
  client.print("Content-Length: ");
  client.println(jsonObject.length());
  client.println();
  client.println(jsonObject);
        
  int timeout = 5 * 10; // 5 seconds             
  while(!!!client.available() && (timeout-- > 0)){
    delay(100);
  }
  if(!!!client.available()) {
    Serial.println("No response...");
  }
  while(client.available()){
    Serial.write(client.read());
  }
  
  Serial.println("\nclosing connection");
  client.stop(); 
}
